@use "variables" as *;
@use "functions" as *;
@use "breakpoints" as *;
@use "mixins" as *;
@use "utilities" as *;

@use "sass:map";

// generate utility classes
@each $property, $val in $utilities {
  $prefix: map-get($val, "prefix");
  $values: map-get($val, "values");
  $classes: map-get($val, "classes");
  $prefixes: map-get($val, "prefixes");

  @each $keyValue, $value in $values {
    @if ($prefix and not $classes) {
      $cssClass: #{$prefix}-#{$keyValue};
      @if ($keyValue == "default") {
        $cssClass: #{$prefix};
      }

      @include generate-utility($cssClass, $property, $value);
    } @else if (not $prefixes and not $classes) {
      @include generate-utility($keyValue, $property, $value);
    }
  }
  @if ($prefixes) {
    @each $prefix in $prefixes {
      @each $keyValue, $value in $values {
        @if ($prefix == $keyValue) {
          @each $key, $prefixVal in map.get($values, $keyValue) {
            $cssClass: #{$prefix}-#{$key};
            @if ($key == "default") {
              $cssClass: #{$prefix};
            }
            @include generate-utility($cssClass, $property, $prefixVal);
          }
        }
      }
    }
  }

  @if ($classes) {
    @each $keyValue, $value in $values {
      $cssClass: #{$prefix}-#{$keyValue};
      @if ($keyValue == "default") {
        $cssClass: #{$prefix};
      }
      .#{$cssClass} {
        @each $property, $propertyValue in $value {
          #{$property}: $propertyValue;
        }
      }

      .hover-#{$cssClass} {
        &:hover {
          @each $property, $propertyValue in $value {
            #{$property}: $propertyValue;
          }
        }
      }
      @each $responsive-prefix, $val in $breakpoints {
        @include responsive-layout($responsive-prefix) {
          .#{$responsive-prefix}-#{$cssClass} {
            @each $property, $propertyValue in $value {
              #{$property}: $propertyValue;
            }
          }
        }
      }
    }
  }
}

// Generate Color variations
@each $key, $val in $colors {
  @if $val !=
    white and
    $val !=
    black and
    $val !=
    transparent and
    $val !=
    inherit
  {
    //   light variations
    @include generate-color-variations($key, $val, "light");

    //  dark variations
    @include generate-color-variations($key, $val, "dark");
  }
}

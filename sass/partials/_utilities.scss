@use "sass:map";

// Define utilities map
$utilities: (
  // Layout
  "display":
    (
      values: (
        flex: flex,
        inline-flex: inline-flex,
        block: block,
        inline: inline,
        inline-block: inline-block,
        grid: grid,
        inline-grid: inline-grid,
        flow-root: flow-root,
        d-none: none,
        contents: contents,
        table: table,
        table-row: table-row,
        list-item: list-item,
      ),
    ),
  "aspect-ratio": (
    prefix: aspect,
    values: (
      auto: auto,
      square: calc(1 / 1),
      video: calc(16 / 9),
      4x3: calc(3 / 4),
    ),
  ),
  "object-fit": (
    prefix: object,
    values: (
      cover: cover,
      contain: contain,
      fill: fill,
      none: none,
      scale-down: scale-down,
    ),
  ),
  "box-sizing": (
    prefix: box,
    values: (
      border: border-box,
      content: content-box,
    ),
  ),
  "float": (
    prefix: float,
    values: (
      start: inline-start,
      end: inline-end,
      right: right,
      left: left,
      none: none,
    ),
  ),
  "top": (
    prefix: top,
    values:
      map-merge(
        spacing-function($base-spacing),
        (
          auto: auto,
          full: 100%,
        )
      ),
  ),
  "bottom": (
    prefix: bottom,
    values:
      map-merge(
        spacing-function($base-spacing),
        (
          auto: auto,
          full: 100%,
        )
      ),
  ),
  "left": (
    prefix: left,
    values:
      map-merge(
        spacing-function($base-spacing),
        (
          auto: auto,
          full: 100%,
        )
      ),
  ),
  "right": (
    prefix: right,
    values:
      map-merge(
        spacing-function($base-spacing),
        (
          auto: auto,
          full: 100%,
        )
      ),
  ),
  "overflow": (
    prefix: overflow,
    values: (
      auto: auto,
      hidden: hidden,
      clip: clip,
      visible: visible,
      scroll: scroll,
    ),
  ),
  "overflow-x": (
    prefix: overflow-x,
    values: (
      auto: auto,
      hidden: hidden,
      clip: clip,
      visible: visible,
      scroll: scroll,
    ),
  ),
  "overflow-y": (
    prefix: overflow-y,
    values: (
      auto: auto,
      hidden: hidden,
      clip: clip,
      visible: visible,
      scroll: scroll,
    ),
  ),
  "position": (
    values: (
      static: static,
      fixed: fixed,
      absolute: absolute,
      relative: relative,
      sticky: sticky,
    ),
  ),
  "visibility": (
    values: (
      visible: visible,
      invisible: hidden,
      collapse: collapse,
    ),
  ),
  "z-index": (
    prefix: z,
    values: (
      auto: auto,
      0: 0,
      1: 1,
      2: 2,
      3: 3,
      4: 4,
      5: 5,
      6: 6,
      7: 7,
      8: 8,
      9: 9,
      10: 10,
      20: 20,
      30: 30,
      40: 40,
      50: 50,
    ),
  ),
  // Spacing
  "padding":
    (
      prefix: p,
      values: spacing-function($base-padding),
    ),
  "padding-left": (
    prefix: pl,
    values: spacing-function($base-padding),
  ),
  "padding-right": (
    prefix: pr,
    values: spacing-function($base-padding),
  ),
  "padding-top": (
    prefix: pt,
    values: spacing-function($base-padding),
  ),
  "padding-bottom": (
    prefix: pb,
    values: spacing-function($base-padding),
  ),
  "margin": (
    prefix: m,
    values:
      map-merge(
        spacing-function($base-margin),
        (
          auto: auto,
        )
      ),
  ),
  "margin-left": (
    prefix: ml,
    values:
      map-merge(
        spacing-function($base-margin),
        (
          auto: auto,
        )
      ),
  ),
  "margin-right": (
    prefix: mr,
    values:
      map-merge(
        spacing-function($base-margin),
        (
          auto: auto,
        )
      ),
  ),
  "margin-top": (
    prefix: mt,
    values:
      map-merge(
        spacing-function($base-margin),
        (
          auto: auto,
        )
      ),
  ),
  "margin-bottom": (
    prefix: mb,
    values:
      map-merge(
        spacing-function($base-margin),
        (
          auto: auto,
        )
      ),
  ),
  // Sizing
  "width":
    (
      prefix: w,
      values:
        map-merge(
          (
            auto: auto,
            full: 100%,
            screen: 100vh,
            svw: 100svw,
            lvw: 100lvw,
            dvw: 100dvw,
            min: min-content,
            max: max-content,
            fit: fit-content,
          ),
          spacing-function()
        ),
    ),
  "min-width": (
    prefix: min-w,
    values:
      map-merge(
        (
          full: 100%,
          min: min-content,
          max: max-content,
          fit: fit-content,
        ),
        spacing-function()
      ),
  ),
  "max-width": (
    prefix: max-w,
    values:
      map-merge(
        (
          full: 100%,
          min: min-content,
          max: max-content,
          fit: fit-content,
          sm: map-get($breakpoints, sm),
          md: map-get($breakpoints, md),
          lg: map-get($breakpoints, lg),
          xl: map-get($breakpoints, xl),
          xxl: map-get($breakpoints, xxl),
          none: none,
        ),
        spacing-function()
      ),
  ),
  "height": (
    prefix: h,
    values:
      map-merge(
        (
          auto: auto,
          full: 100%,
          screen: 100vh,
          svw: 100svw,
          lvw: 100lvw,
          dvw: 100dvw,
          min: min-content,
          max: max-content,
          fit: fit-content,
        ),
        spacing-function()
      ),
  ),
  "min-height": (
    prefix: min-h,
    values:
      map-merge(
        (
          full: 100%,
          screen: 100vh,
          svw: 100svw,
          lvw: 100lvw,
          dvw: 100dvw,
          min: min-content,
          max: max-content,
          fit: fit-content,
        ),
        spacing-function()
      ),
  ),
  "max-height": (
    prefix: max-h,
    values:
      map-merge(
        (
          full: 100%,
          screen: 100vh,
          svw: 100svw,
          lvw: 100lvw,
          dvw: 100dvw,
          min: min-content,
          max: max-content,
          fit: fit-content,
          none: none,
        ),
        spacing-function()
      ),
  ),
  // Typography
  "font-family":
    (
      prefix: font,
      values: (
        sans-serif: $font-sans-serif,
        serif: $font-serif,
        monospace: $font-monospace,
        arial: $font-arial,
      ),
    ),
  "font-size": (
    prefix: text,
    values: (
      base: $font-size-base,
      xs: $font-size-xs,
      sm: $font-size-sm,
      lg: $font-size-lg,
      xl: $font-size-xl,
      2xl: $font-size-2xl,
      3xl: $font-size-3xl,
      4xl: $font-size-4xl,
      5xl: $font-size-5xl,
      6xl: $font-size-6xl,
      7xl: $font-size-7xl,
      8xl: $font-size-8xl,
      9xl: $font-size-9xl,
      h1: $font-size-h1,
      h2: $font-size-h2,
      h3: $font-size-h3,
      h4: $font-size-h4,
      h5: $font-size-h5,
      h6: $font-size-h6,
    ),
  ),
  "font-style": (
    prefix: font-style,
    values: (
      italic: italic,
      normal: normal,
    ),
  ),
  "font-weight": (
    prefix: font,
    values: (
      lighter: $font-weight-lighter,
      light: $font-weight-light,
      normal: $font-weight-normal,
      medium: $font-weight-medium,
      semibold: $font-weight-semibold,
      bold: $font-weight-bold,
      bolder: $font-weight-bolder,
    ),
  ),
  "letter-spacing": (
    prefix: letter-spacing,
    values: (
      tighter: $letter-spacing-tighter,
      tight: $letter-spacing-tight,
      normal: $letter-spacing-normal,
      wide: $letter-spacing-wide,
      wider: $letter-spacing-wider,
      widest: $letter-spacing-widest,
    ),
  ),
  "line-height": (
    prefix: line-height,
    values: (
      none: 1,
      sm: $line-height-sm,
      normal: $line-height-normal,
      lg: $line-height-lg,
      1: $line-height-1,
      2: $line-height-2,
      3: $line-height-3,
      4: $line-height-4,
      5: $line-height-5,
      6: $line-height-6,
      7: $line-height-7,
      8: $line-height-8,
      9: $line-height-9,
      10: $line-height-10,
    ),
  ),
  "list-style-position": (
    prefix: list-style,
    values: (
      inside: inside,
      outside: outside,
    ),
  ),
  "list-style-type": (
    prefix: list-style,
    values: (
      none: none,
      disc: disc,
      decimal: decimal,
    ),
  ),
  "text-align": (
    prefix: text,
    values: (
      left: left,
      center: center,
      right: right,
      justify: justify,
      start: start,
      end: end,
    ),
  ),
  "text-decoration-line": (
    prefix: text-dec,
    values: (
      underline: underline,
      overline: overline,
      line-through: line-through,
      none: none,
    ),
  ),
  "text-decoration-color": (
    prefix: text-dec,
    values: $colors,
  ),
  "text-decoration-thickness": (
    prefix: text-dec,
    values: (
      auto: auto,
      from-font: from-font,
      0: $text-decoration-thickness-0,
      1: $text-decoration-thickness-1,
      2: $text-decoration-thickness-2,
      3: $text-decoration-thickness-3,
      4: $text-decoration-thickness-4,
      5: $text-decoration-thickness-5,
      6: $text-decoration-thickness-6,
      7: $text-decoration-thickness-7,
      8: $text-decoration-thickness-8,
      9: $text-decoration-thickness-9,
      10: $text-decoration-thickness-10,
    ),
  ),
  "text-underline-offset": (
    prefix: text-underline-offset,
    values: (
      auto: auto,
      0: $text-underline-offset-0,
      1: $text-underline-offset-1,
      2: $text-underline-offset-2,
      3: $text-underline-offset-3,
      4: $text-underline-offset-4,
      5: $text-underline-offset-5,
      8: $text-underline-offset-8,
    ),
  ),
  "text-transform": (
    values: (
      uppercase: uppercase,
      lowercase: lowercase,
      capitalize: capitalize,
      normal-case: none,
    ),
  ),
  "text-overflow": (
    prefix: text,
    values: (
      ellipsis: ellipsis,
      clip: clip,
    ),
  ),
  "text-wrap": (
    prefix: text,
    values: (
      wrap: wrap,
      nowrap: nowrap,
      balance: balance,
      pretty: pretty,
    ),
  ),
  "text-indent": (
    prefix: text-indent,
    values: spacing-function(),
  ),
  "white-space": (
    prefix: white-space,
    values: (
      normal: normal,
      nowrap: nowrap,
      pre: pre,
      pre-line: pre-line,
      pre-wrap: pre-wrap,
      break-spaces: break-spaces,
    ),
  ),
  "hyphens": (
    prefix: hyphens,
    values: (
      none: none,
      manual: manual,
      auto: auto,
    ),
  ),
  // Borders
  "border-radius":
    (
      prefix: rounded,
      values: (
        none: 0,
        default: $base-border-radius,
        full: 50%,
        2: $base-border-radius * 2,
        3: $base-border-radius * 3,
        4: $base-border-radius * 4,
        5: $base-border-radius * 5,
        6: $base-border-radius * 6,
      ),
    )
) !default;

// generate utility classes
@each $property, $val in $utilities {
  $prefix: map-get($val, "prefix");
  $values: map-get($val, "values");

  @each $keyValue, $value in $values {
    @if ($prefix) {
      @if ($keyValue == "default") {
        .#{$prefix} {
          #{$property}: $value;
        }
        .hover-#{$prefix} {
          &:hover {
            #{$property}: $value;
          }
        }
        @each $responsive-prefix, $val in $breakpoints {
          @include responsive-layout($responsive-prefix) {
            .#{$responsive-prefix}-#{$prefix} {
              #{$property}: $value;
            }
          }
        }
      } @else {
        .#{$prefix}-#{$keyValue} {
          #{$property}: $value;
        }
        .hover-#{$prefix}-#{$keyValue} {
          &:hover {
            #{$property}: $value;
          }
        }
        @each $responsive-prefix, $val in $breakpoints {
          @include responsive-layout($responsive-prefix) {
            .#{$responsive-prefix}-#{$prefix}-#{$keyValue} {
              #{$property}: $value;
            }
          }
        }
      }
    } @else {
      .#{$keyValue} {
        #{$property}: $value;
      }
      .hover-#{$keyValue} {
        &:hover {
          #{$property}: $value;
        }
      }
      @each $responsive-prefix, $val in $breakpoints {
        @include responsive-layout($responsive-prefix) {
          .#{$responsive-prefix}-#{$keyValue} {
            #{$property}: $value;
          }
        }
      }
    }
  }
}
